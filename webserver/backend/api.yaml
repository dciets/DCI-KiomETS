openapi: 3.0.0
info:
  title: JDIS wish 2 API
  description: API for JDIS wish 2
  version: 1.0.0
servers:
    - url: http://localhost:8080
      description: Local server
tags:
  - name: Agent
    description: Agent operations
  - name: Game
    description: Game operations
paths:
  /api/agent:
    get:
      tags:
        - Agent
      summary: Get all agents
      security: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Agent'

    post:
      tags:
        - Agent
      summary: Create a new agent and return its uid
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
                  example: "Agent 1"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'

  /api/game:
    get:
      tags:
        - Game
      summary: Get parameters for the current game
      security: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  parameters:
                    $ref: '#/components/schemas/Parameters'
        404:
          description: User Not Found
        401:
          description: Unauthorized
        403:
            description: Forbidden
    put:
        tags:
            - Game
        summary: Update parameters for the current game
        security:
            - auth: [admin]
        requestBody:
            required: true
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Parameters'

        responses:
            200:
              description: OK
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      parameters:
                        $ref: '#/components/schemas/Parameters'
            404:
              description: User Not Found
            401:
              description: Unauthorized
            403:
                description: Forbidden
  /api/start:
    post:
      tags:
        - Game
      summary: Start game
      security:
        - auth: [admin]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: "Game started"
        401:
          description: Unauthorized
        403:
            description: Forbidden
        409:
            description: Game already started
  /api/stop:
    post:
      tags:
        - Game
      summary: Stop game
      security:
        - auth: [admin]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: "Game stopped"
        401:
          description: Unauthorized
        403:
            description: Forbidden
        409:
            description: No Game started
  /api/status:
    get:
      tags:
        - Game
      summary: Get game status
      security: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: "Game started"

components:
  schemas:
    Parameters:
        type: object
        properties:
          mapSize:
              type: integer
          soldierSpeed:
              type: integer
          soldierCreationSpeed:
              type: integer
          terrainChangeSpeed:
              type: integer
          gameLength:
              type: integer
    Agent:
        type: object
        properties:
          UID:
              type: string
              example: "123ABC"
          Name:
              type: string
              example: "Agent 1"
  securitySchemes:
    auth:
      type: http
      scheme: bearer
      bearerFormat: JWT